<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>原生Project1</title>
      <link href="/2023/10/19/%E5%8E%9F%E7%94%9FProject1/"/>
      <url>/2023/10/19/%E5%8E%9F%E7%94%9FProject1/</url>
      
        <content type="html"><![CDATA[<p>Android Studio is the official Integrated Development Environment (IDE) for Android app development. Based on the powerful code editor and developer tools from IntelliJ IDEA , Android Studio offers even more features that enhance your productivity when building Android apps,</p><hr><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p> 使用Android studio搭建的备忘录</p><h3 id="登陆页"><a href="#登陆页" class="headerlink" title="登陆页"></a>登陆页</h3>  <div align="center">  <img src="/2023/10/19/%E5%8E%9F%E7%94%9FProject1/1.png" width="30%" height="30%">  </div><p>  登录功能实现逻辑：<br>  1、在两个EditText控件中分别输入用户名和密码；<br>  2、判断用户名和密码是否为空，若为空则通过Toast控件提醒用户输入用户名和密码；<br>  3、点击保存按钮，将用户名和密码保存到APP中；<br>  4、登录时输入用户名和密码，点击登录按钮同时从APP中读取存入的用户名和密码，进行比较，如果一致，则登录成功，否则提示用户，用户名或密码不正确，需要重新输入；登录成功跳转到备忘录列表界面。</p><h4 id="用户保存账号密码"><a href="#用户保存账号密码" class="headerlink" title="用户保存账号密码"></a>用户保存账号密码</h4>  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public void saved(View view)&#123;</span><br><span class="line">     //获取输入的用户名和密码</span><br><span class="line">     String name = userName.getText().toString().trim();</span><br><span class="line">     //String psw = passWord.getText().toString().trim();</span><br><span class="line">     //对用户输入的密码进行加密 登陆也会对输入的密码加密</span><br><span class="line">     String psw1 = passWord.getText().toString().trim();</span><br><span class="line">     String psw = MD5Utils.md5(psw1);</span><br><span class="line">     <span class="keyword">if</span> (name.equals(<span class="string">&quot;&quot;</span>) || name == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">         Toast.makeText(LoginActivity.this, <span class="string">&quot;请输入用户名&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (psw.equals(<span class="string">&quot;&quot;</span>) || psw == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">         Toast.makeText(LoginActivity.this, <span class="string">&quot;请输入密码&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">     &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">         //调用SPSaveUserInfo类是的saveUserInfo()方法保存用户名和密码</span><br><span class="line">         boolean isSaveSuccess = SPSaveUserInfo.saveUserInfo(this,name,psw);</span><br><span class="line">         //判断是否保存成功</span><br><span class="line">         <span class="keyword">if</span> (isSaveSuccess)&#123;//如果isSaveSuccess为<span class="literal">true</span>那就显示保存成功反之失败</span><br><span class="line">             Toast.makeText(LoginActivity.this, <span class="string">&quot;保存成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             Toast.makeText(LoginActivity.this, <span class="string">&quot;保存失败&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     //保存后清空用户名或密码</span><br><span class="line">     userName.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">     passWord.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public static boolean saveUserInfo(Context context, String account, String password)&#123;</span><br><span class="line">             //获得SharedPreferences对象</span><br><span class="line">             SharedPreferences sp = context.getSharedPreferences(<span class="string">&quot;data&quot;</span>,Context.MODE_PRIVATE);</span><br><span class="line">             //获取编辑器</span><br><span class="line">             SharedPreferences.Editor editor = sp.edit();</span><br><span class="line">             //将传递过来的用户名和密码写入到编辑器</span><br><span class="line">             editor.putString(<span class="string">&quot;account&quot;</span>,account);</span><br><span class="line">             editor.putString(<span class="string">&quot;password&quot;</span>,password);</span><br><span class="line">             editor.commit();//提交编辑器</span><br><span class="line">             <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>1.获取一个SharedPreferences对象，这个名字为”data”，并且其模式为MODE_PRIVATE，这意味着只有当前的应用程序可以访问这个SharedPreferences。<br>2.获取一个编辑器（SharedPreferences.Editor），这个编辑器可以让你添加和修改SharedPreferences中的数据。<br>3.通过editor.putString方法将用户名和密码写入SharedPreferences。<br>4.editor.commit()将编辑器的更改提交，这会保存你在编辑器中做的所有修改。</p><h4 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public class MD5Utils &#123;</span><br><span class="line">    public static String md5(String input) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 创建一个MessageDigest实例，用于MD5加密算法</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line"></span><br><span class="line">            // 将输入字符串转换为字节数组</span><br><span class="line">            byte[] byteArr = input.getBytes();</span><br><span class="line"></span><br><span class="line">            // 使用MD5加密算法更新摘要</span><br><span class="line">            md.update(byteArr);</span><br><span class="line"></span><br><span class="line">            // 获取字节数组的MD5摘要值</span><br><span class="line">            byte[] digest = md.digest();</span><br><span class="line"></span><br><span class="line">            // 将字节数组转换为十六进制字符串</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (byte b : digest) &#123;</span><br><span class="line">                sb.append(String.format(<span class="string">&quot;%02x&quot;</span>, b &amp; 0xff));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 返回十六进制字符串作为加密后的结果</span><br><span class="line">            <span class="built_in">return</span> sb.toString();</span><br><span class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            // 如果MD5算法不可用，则抛出异常</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">return</span> null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="登陆功能实现"><a href="#登陆功能实现" class="headerlink" title="登陆功能实现"></a>登陆功能实现</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">public void login(View view) &#123;             //ctrl+<span class="built_in">shift</span>+/多行注释快捷键</span><br><span class="line">     Map&lt;String, String&gt; userInfo = SPSaveUserInfo.getUserInfo(this);</span><br><span class="line">     //获取输入的用户名和密码</span><br><span class="line">     String name = userName.getText().toString().trim();</span><br><span class="line">     String psw = passWord.getText().toString().trim();</span><br><span class="line">     <span class="keyword">if</span> (name.equals(<span class="string">&quot;&quot;</span>) || name == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">         Toast.makeText(LoginActivity.this, <span class="string">&quot;用户名不能为空&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (psw.equals(<span class="string">&quot;&quot;</span>) || psw == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">         Toast.makeText(LoginActivity.this, <span class="string">&quot;密码不能为空&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(userInfo.get(<span class="string">&quot;account&quot;</span>)) &amp;&amp; psw.equals(userInfo.get(<span class="string">&quot;password&quot;</span>))) &#123;</span><br><span class="line">         //通过Toast控件显示登录信息</span><br><span class="line">         Toast.makeText(LoginActivity.this, <span class="string">&quot;登录成功&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">         //通过Intent意图对象来实现Activity之间的跳转 显示意图</span><br><span class="line">         //实例化一个Intent对象</span><br><span class="line">         Intent intent = new Intent(LoginActivity.this, MemoryActivity.class);</span><br><span class="line">         intent.setAction(<span class="string">&quot;android.intent.action.VIEW&quot;</span>);</span><br><span class="line"></span><br><span class="line">         startActivity(intent); //开启Activity</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         Toast.makeText(LoginActivity.this, <span class="string">&quot;用户名或密码不正确，请重新输入！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="以上代码所用到的知识点"><a href="#以上代码所用到的知识点" class="headerlink" title="以上代码所用到的知识点"></a>以上代码所用到的知识点</h4><p>1 Android Intent：用于在Android应用中启动新的Activity或者打开新的应用组件。<br>2 Toast控件：用于显示简短的文本通知，通常用于向用户显示消息或反馈。<br>3 用户输入获取：通过诸如userName.getText()和passWord.getText()这样的代码行，获取用户界面上的文本输入。<br>4 条件判断：使用if，else if和else语句来进行条件判断和执行相应的代码块。<br>5 字符串比较：使用equals和equalsIgnoreCase方法来比较字符串。<br>6 意图（Intent）动作设置：通过intent.setAction()方法设置Intent的动作。<br>7 Activity的启动：通过startActivity()方法启动新的Activity。</p><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3>  <div align="center">  <img src="/2023/10/19/%E5%8E%9F%E7%94%9FProject1/主页.png" width="30%" height="30%">  </div>  <h3 id="添加记录"><a href="#添加记录" class="headerlink" title="添加记录"></a>添加记录</h3>  <div align="center">  <img src="/2023/10/19/%E5%8E%9F%E7%94%9FProject1/添加记录.png" width="30%" height="30%">  </div>  <h3 id="修改记录"><a href="#修改记录" class="headerlink" title="修改记录"></a>修改记录</h3>  <div align="center">  <img src="/2023/10/19/%E5%8E%9F%E7%94%9FProject1/修改记录.png" width="30%" height="30%">  </div>  <h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3>  <div align="center">  <img src="/2023/10/19/%E5%8E%9F%E7%94%9FProject1/删除记录.png" width="30%" height="30%">  </div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flutter news</title>
      <link href="/2023/10/17/Flutter_news/"/>
      <url>/2023/10/17/Flutter_news/</url>
      
        <content type="html"><![CDATA[<p>Flutter transforms the app development process. Build, test, and deploy beautiful mobile, web, desktop, and embedded apps from a single codebase.</p><hr><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><p>基于flutter框架搭建的新闻查询app</p><h3 id="欢迎页"><a href="#欢迎页" class="headerlink" title="欢迎页"></a>欢迎页</h3> <div align="center"> <img src="/2023/10/17/Flutter_news/1.png" width="30%" height="30%"> </div> <h4 id="通过ElevatedButton组件跳转到登录页"><a href="#通过ElevatedButton组件跳转到登录页" class="headerlink" title="通过ElevatedButton组件跳转到登录页"></a>通过ElevatedButton组件跳转到登录页</h4> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">child: ElevatedButton(</span><br><span class="line">     style: ElevatedButton.styleFrom(</span><br><span class="line">       shape: RoundedRectangleBorder(</span><br><span class="line">         borderRadius: Radii.k6pxRadivs</span><br><span class="line">       ),</span><br><span class="line">       backgroundColor: AppColors.primaryElement,</span><br><span class="line">       textStyle: TextStyle(</span><br><span class="line">         color: AppColors.primaryText</span><br><span class="line">       )</span><br><span class="line">     ),</span><br><span class="line">     child: Text(</span><br><span class="line">       <span class="string">&quot;开始浏览&quot;</span></span><br><span class="line">     ),</span><br><span class="line">     onPressed: ()&#123;</span><br><span class="line">       debugPrint(<span class="string">&quot;helloworld&quot;</span>);</span><br><span class="line">       Navigator.pushNamed(context, <span class="string">&quot;./sign-up&quot;</span>);</span><br><span class="line">     &#125;,</span><br><span class="line">   ),</span><br></pre></td></tr></table></figure><p>ElevatedButton是Flutter中的一个按钮组件，通过onPressed点击事件的回调函数跳转到登录页</p><h3 id="登陆页"><a href="#登陆页" class="headerlink" title="登陆页"></a>登陆页</h3> <div align="center"> <img src="/2023/10/17/Flutter_news/2.png" width="30%" height="30%"> </div><h4 id="检测输入框实现登陆功能"><a href="#检测输入框实现登陆功能" class="headerlink" title="检测输入框实现登陆功能"></a>检测输入框实现登陆功能</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">final TextEditingController _accountController = TextEditingController();</span><br><span class="line"> </span><br><span class="line">final TextEditingController _passwordController = TextEditingController();</span><br></pre></td></tr></table></figure><p> 声明账号，密码输入框</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">Future&lt;bool?&gt; _handInSign() async &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Future&lt;bool?&gt;表示一个返回bool类型或null的异步操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!duIsAccount(_accountController.value.text))&#123;//如果输入的值和duIsAccount不匹配</span><br><span class="line">  await Fluttertoast.showToast(msg: <span class="string">&quot;账号不规范&quot;</span>);</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!duCheckStingLength(_passwordController.value.text, 6))&#123;</span><br><span class="line">  await Fluttertoast.showToast(msg: <span class="string">&quot;密码长度不够&quot;</span>);</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>校验用户输入的值与在utlis.dart中定义的duIsAccount正则表达式、duCheckStingLength是否匹配</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UserLoginResponseEntity userProfile =</span><br><span class="line">await UserAPI.login(context: context, params: myparse);</span><br></pre></td></tr></table></figure><p>调用apis中的登陆方法并传值context，myparse</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(userProfile.accessToken.isNotEmpty)&#123;</span><br><span class="line">      Navigator.pushNamed(context, <span class="string">&quot;./app&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>判断accessToken是否不为空，如果不为空则通过Navigator跳转到首页</p><p>在Flutter中，accessToken是在某些情况下使用的身份验证令牌，例如在与后端服务器交互或使用某些第三方服务时。它通常用于证<br>明你的应用程序或用户的身份，并授予对特定资源的访问权限。 ————GPT</p><hr><p>对用户输入的密码进行加密</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">String duSha256(String inputPassword)&#123;</span><br><span class="line">  String salt = <span class="string">&quot;aslkjfalsfkjaslfkjslfkjlafsk&quot;</span>; //盐</span><br><span class="line">  var bytes = utf8.encode(inputPassword + salt);</span><br><span class="line">  <span class="built_in">return</span> sha256.convert(bytes).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将输入的字符串密码（inputPassword）与一个硬编码的盐值（salt）连接，然后转换为SHA-256</p><p>可改进的地方<br>1.盐值应该是一个随机生成的字符串，而不是一个硬编码的值。<br>2.在函数中添加一些异常处理。例如，如果inputPassword是null或者空字符串，或者如果utf8.encode或sha256.convert出现任何错误，函数应该能够处理这些情况。</p><h3 id="主页页面切换"><a href="#主页页面切换" class="headerlink" title="主页页面切换"></a>主页页面切换</h3><div align="center"> <img src="/2023/10/17/Flutter_news/首页.png" width="30%" height="30%"></div><h4 id="顶部导航栏"><a href="#顶部导航栏" class="headerlink" title="顶部导航栏"></a>顶部导航栏</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PreferredSizeWidget <span class="function"><span class="title">_buildAppBar</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> transparentAppBar(</span><br><span class="line">      context: context,</span><br><span class="line">      title: Text(</span><br><span class="line">        _tabTitles[_page],</span><br><span class="line">        style: TextStyle(</span><br><span class="line">            color: Colors.black,</span><br><span class="line">            fontFamily: <span class="string">&quot;Montserrat&quot;</span>,</span><br><span class="line">            fontSize: duSetFontSize(18),</span><br><span class="line">            fontWeight: FontWeight.w600),</span><br><span class="line">      ),</span><br><span class="line">      leading: const Text(<span class="string">&quot;&quot;</span>), //首页没有返回按钮，所以传空值</span><br><span class="line">      actions: &lt;Widget&gt;[</span><br><span class="line">        IconButton(</span><br><span class="line">            onPressed: () &#123;</span><br><span class="line">              debugPrint(<span class="string">&quot;正在搜索&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            icon: const Icon(</span><br><span class="line">              Icons.search,</span><br><span class="line">              color: AppColors.primartyText2,</span><br><span class="line">            ))</span><br><span class="line">      ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用封装在Widget的导航栏通用组件<br>页面导航栏标题根据索引值来显示</p><h3 id="底部导航栏"><a href="#底部导航栏" class="headerlink" title="底部导航栏"></a>底部导航栏</h3> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Widget <span class="function"><span class="title">_buildBottomNavigationBar</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> BottomNavigationBar(</span><br><span class="line">    items: _bottomTabs, //底部导航的按钮列表</span><br><span class="line">    currentIndex: _page,</span><br><span class="line">    <span class="built_in">type</span>: BottomNavigationBarType.fixed, //底部导航 固定</span><br><span class="line">    onTap: (int index) &#123;</span><br><span class="line">      // setState(() &#123;</span><br><span class="line">      //   _page = index;</span><br><span class="line">      // &#125;);</span><br><span class="line">      //animateToPage - 动画跳转到页面</span><br><span class="line">      _pageController.animateToPage(</span><br><span class="line">          index,</span><br><span class="line">          duration:const Duration(milliseconds: <span class="number">500</span>),</span><br><span class="line">          curve: Curves.ease</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    &#125;, //绑定点击事件 -&gt;传入变量 index</span><br><span class="line">    showSelectedLabels: false, //是否展示选中的标签,</span><br><span class="line">    showUnselectedLabels: false, //是否展示未选中的标签</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_bottomTabs 是底部导航栏的按钮列表，每个按钮应该都是一个 BottomNavigationBarItem 对象。<br>currentIndex 是当前选中的页面的索引。<br>type 是底部导航栏的类型，这里是固定类型。<br>onTap 是每个按钮被点击时执行的操作。在这个例子中，它被用来更改页面索引并让页面动画跳转到这个新的索引。<br>animateToPage 是 PageController 类的一个方法，它可以让页面动画跳转到指定的索引。<br>duration 是动画跳转的时间长度，这里是0.5秒。<br>curve 是动画的速度曲线，这里是渐变。</p><h4 id="内容切换"><a href="#内容切换" class="headerlink" title="内容切换"></a>内容切换</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Widget <span class="function"><span class="title">_buildPageView</span></span>()&#123;</span><br><span class="line">  <span class="built_in">return</span> PageView(</span><br><span class="line"></span><br><span class="line">    //切换方式</span><br><span class="line">    physics: const BouncingScrollPhysics(),</span><br><span class="line"></span><br><span class="line">    //页面控制器</span><br><span class="line">    controller: _pageController,</span><br><span class="line"></span><br><span class="line">    //页面切换时调用的函数</span><br><span class="line">    onPageChanged: (int index)&#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _page = index;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //子页面视图空间</span><br><span class="line">    children:  const[</span><br><span class="line">      MainPage(),</span><br><span class="line">      AccountPage()</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>physics 属性定义了滚动行为，这里使用的是BouncingScrollPhysics()，它模拟了物理上的弹性滚动效果。<br>controller 属性定义了页面控制器，这个控制器可以用来控制PageView的滚动和跳转。<br>onPageChanged 属性是一个回调函数，当页面切换时，它会被调用。这里它被用来更新当前的页面索引。<br>children 属性是一个Widget列表，每个元素代表一个子页面。</p><h3 id="新闻中心"><a href="#新闻中心" class="headerlink" title="新闻中心"></a>新闻中心</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编写网络的请求方法</span><br><span class="line">void _loadAllDate() async &#123;</span><br><span class="line">  //发送请求 收纳柜用缓存存存储数量</span><br><span class="line">  _categories = await NewsAPI.categories(</span><br><span class="line">    context: context,</span><br><span class="line">  cacheDisk: <span class="literal">true</span>,</span><br><span class="line">  );</span><br><span class="line">  _selCategoryCode = _categories![0].code;</span><br><span class="line">  debugPrint(<span class="string">&quot;分类是: <span class="variable">$&#123;_categories![0].toJson()&#125;</span>&quot;</span>);</span><br><span class="line">  //2 拉取推荐阅读</span><br><span class="line">  _newsRecommend =</span><br><span class="line">  await NewsAPI.newsRecommend(context: context,cacheDisk: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  //3 拉取频道数组</span><br><span class="line">  _channels = await NewsAPI.channels(context: context,cacheDisk: <span class="literal">true</span>,);</span><br><span class="line"></span><br><span class="line">  //4 新闻列表的请求</span><br><span class="line">  _newsPageList =</span><br><span class="line">  await NewsAPI.newsPageList(context: context, cacheDisk: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(mounted)&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送网络请求用于获取数据，以上所有的数据获取都是异步进行的，它们不会阻止程序的其它部分运行<br>所有的数据都存储在缓存中以便后续使用，这可以减少对网络的访问次数，提高程序的效率。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">void <span class="function"><span class="title">initState</span></span>() &#123;</span><br><span class="line">  super.initState();</span><br><span class="line">  _loadAllDate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initState()。这个方法在Flutter的StatefulWidget生命周期的开始时调用，通常用于初始化组件的状态。</p><h4 id="在新闻中心调用分类组件"><a href="#在新闻中心调用分类组件" class="headerlink" title="在新闻中心调用分类组件"></a>在新闻中心调用分类组件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Widget <span class="function"><span class="title">_buildCateGories</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> _categories == null</span><br><span class="line">      ? SizedBox()</span><br><span class="line">      : newCategoriesWidget(</span><br><span class="line">          categories: _categories!,//将categories赋值给_categories！</span><br><span class="line">          selCategoryCode: _selCategoryCode,</span><br><span class="line">          onTap: (CategoryResponseEntity item) &#123;</span><br><span class="line">            debugPrint(item.title);</span><br><span class="line">            debugPrint(item.code);</span><br><span class="line"></span><br><span class="line">            _categories![0].code = item.code;</span><br><span class="line">            _categories![0].title = item.title;</span><br><span class="line"></span><br><span class="line">            _selCategoryCode = _categories![0].code;</span><br><span class="line"></span><br><span class="line">          &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果频道分类变量为空那么就返回一个SizeBox否则它会返回一个具有新分类的newCategoriesWidget()</p><h4 id="在新闻中心调用推荐组件"><a href="#在新闻中心调用推荐组件" class="headerlink" title="在新闻中心调用推荐组件"></a>在新闻中心调用推荐组件</h4> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> Widget <span class="function"><span class="title">_buildRecommend</span></span>() &#123;</span><br><span class="line">  <span class="built_in">return</span> _newsRecommend == null</span><br><span class="line">      ? const SizedBox()</span><br><span class="line">      : recommendWidget(_newsRecommend!);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在新闻中心调用新闻列表组件"><a href="#在新闻中心调用新闻列表组件" class="headerlink" title="在新闻中心调用新闻列表组件"></a>在新闻中心调用新闻列表组件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//文章列表组件</span><br><span class="line">  Widget <span class="function"><span class="title">_buildNewsList</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> _newsPageList == null</span><br><span class="line">        ? Container()</span><br><span class="line">        : Column(</span><br><span class="line">            children: _newsPageList!.items.map((item) &#123;//map去遍历_newsPageList!的内容将遍历的每个新闻信息通过toList渲染成一个新闻列表</span><br><span class="line">              //声明文章卡片组件内容</span><br><span class="line">              List&lt;Widget&gt; _haha = &lt;Widget&gt;[</span><br><span class="line">                newsItem(item, context),</span><br><span class="line">                const Divider(//一个分割线</span><br><span class="line">                  height: <span class="number">1</span>,</span><br><span class="line">                )</span><br><span class="line">              ];</span><br><span class="line">              //插入广告</span><br><span class="line">              int index = _newsPageList!.items.indexOf(item);</span><br><span class="line">              //每五个插入一条广告组件</span><br><span class="line">              if ((index + <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                _haha.addAll([//通过addAll方法将广告组件放进_haha中</span><br><span class="line">                  adWidget(),</span><br><span class="line">                  const Divider(</span><br><span class="line">                    height: <span class="number">1</span>,</span><br><span class="line">                  )</span><br><span class="line">                ]);</span><br><span class="line">              &#125;</span><br><span class="line">              return Column(//返回一个垂直布局的_haha</span><br><span class="line">                children: _haha,</span><br><span class="line">              );</span><br><span class="line">            &#125;).toList(),</span><br><span class="line">          );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="分类组件"><a href="#分类组件" class="headerlink" title="分类组件"></a>分类组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">return</span> SingleChildScrollView(</span><br><span class="line">    //SingleChildScrollView是一个用于创建一个单个子项可滚动视图的Widget</span><br><span class="line">    //滚动方向 - 水平滚动</span><br><span class="line">    scrollDirection: Axis.horizontal,</span><br><span class="line">    //子组件</span><br><span class="line">    child: Row(//水平布局</span><br><span class="line">      children: categories.map&lt;Widget&gt;((item) &#123;</span><br><span class="line">        //categories是一个字符串列表。map函数被用来遍历这个列表，然后对每个元素创建一个Widget。.toList()方法将映射后的Widget列表转换为一个列表。</span><br><span class="line"></span><br><span class="line">        //返回一个包含分类的容器</span><br><span class="line">        return Container(//返回一个容器</span><br><span class="line">          alignment: Alignment.center,//对齐方式为居中对齐</span><br><span class="line">          height: duSetHeight(<span class="number">52</span>),//高度</span><br><span class="line">          padding: const EdgeInsets.symmetric(horizontal: <span class="number">8</span>),//内边距</span><br><span class="line">          child: GestureDetector(</span><br><span class="line">            //GestureDetector是Flutter中的一个组件，用于识别各种手势，如点击、双击、长按、拖动、缩放等。</span><br><span class="line">            child: Text(//文本</span><br><span class="line">              item.title,//文本内容为标题</span><br><span class="line">              style: TextStyle(//文本样式</span><br><span class="line">                  color: selCategoryCode == item.code//一个三元表达式，当选中的分类和当前分类的值相等，那么颜色就为primaryText,否则为第二个</span><br><span class="line">                      ? AppColors.primaryText</span><br><span class="line">                      : AppColors.primartyText2,</span><br><span class="line">                  fontSize: duSetFontSize(<span class="number">18</span>),</span><br><span class="line">                  fontFamily: &quot;Montserrat&quot;,</span><br><span class="line">                  fontWeight: FontWeight.w600),</span><br><span class="line">            ),</span><br><span class="line">            //手势识别点击事件，触发传递过来的ontap 事件</span><br><span class="line">            onTap: () =&gt; onTap(item),</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;).toList(),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="频道组件"><a href="#频道组件" class="headerlink" title="频道组件"></a>频道组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">return</span> SizedBox(，//SizedBox是一个用于指定小部件大小的布局部件。它具有固定的大小，不会随着屏幕大小或父部件大小的变化而变化。</span><br><span class="line">  height: duSetHeight(137),</span><br><span class="line">  child: SingleChildScrollView(//单向滚动视图</span><br><span class="line">    scrollDirection: Axis.horizontal,//水平轴滚动</span><br><span class="line">    child: Row(//水平</span><br><span class="line">      children: channels.map&lt;Widget&gt;((item)&#123;//同上</span><br><span class="line">        return Container(//返回一个容器</span><br><span class="line">          width: duSetWidth(<span class="number">70</span>),</span><br><span class="line">          height: duSetHeight(<span class="number">97</span>),</span><br><span class="line">          margin: EdgeInsets.symmetric(horizontal: duSetWidth(<span class="number">10</span>)),//上外边距</span><br><span class="line">          child: GestureDetector(</span><br><span class="line">            //手势检测器</span><br><span class="line">            child: Column(//垂直布局</span><br><span class="line">              crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">              mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">              //crossAxisAlignment: CrossAxisAlignment.center, 是设置交叉轴（垂直于主轴）的对齐方式为居中。</span><br><span class="line">              //mainAxisAlignment: MainAxisAlignment.spaceBetween, 是设置主轴的对齐方式为两端对齐，即元素之间有等量的空间。</span><br><span class="line">              children: [</span><br><span class="line">                Container(</span><br><span class="line">                  width: duSetWidth(60),</span><br><span class="line">                  height: duSetHeight(64),</span><br><span class="line">                  //阴影</span><br><span class="line">                  decoration: BoxDecoration(</span><br><span class="line">                    borderRadius: BorderRadius.circular(duSetWidth(32)),//圆角</span><br><span class="line">                    color: AppColors.primaryBackground,</span><br><span class="line">                    boxShadow: const [</span><br><span class="line">                      BoxShadow(</span><br><span class="line">                        color: Color.fromARGB(38, 27, 27, 29),</span><br><span class="line">                        offset: Offset(0, 5),//Offset(0, 5)定义了一个在y轴方向偏移5个单位的点。</span><br><span class="line">                        blurRadius: 40//blurRadius是定义了阴影边缘的模糊程度，值越大阴影边缘越模糊。</span><br><span class="line">                      ),</span><br><span class="line">                    ]</span><br><span class="line">                  ),</span><br><span class="line">                  child: Center(//居中</span><br><span class="line">                    child: Image.asset(</span><br><span class="line">                      <span class="string">&quot;assets/images/channel-<span class="variable">$&#123;item.title&#125;</span>.png&quot;</span>,</span><br><span class="line">                      //你正在使用这个方法从一个叫做channel-<span class="variable">$&#123;item.title&#125;</span>.png的资产中加载图片</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Text(</span><br><span class="line">                  item.title,</span><br><span class="line">                textAlign: TextAlign.center,</span><br><span class="line">                  overflow: TextOverflow.clip,</span><br><span class="line">                  maxLines: 1,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    color: AppColors.thirdElementText,</span><br><span class="line">                    fontFamily: <span class="string">&quot;Avenir&quot;</span>,</span><br><span class="line">                    fontSize: duSetFontSize(14),</span><br><span class="line">                    fontWeight: FontWeight.w400,</span><br><span class="line">                    height: 1</span><br><span class="line">                  ),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">            onTap: () =&gt; onTap(item),</span><br><span class="line">          ),</span><br><span class="line">        );</span><br><span class="line">      &#125;).toList(),</span><br><span class="line">    ),//滚动元素横向排列</span><br><span class="line"></span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="推荐组件"><a href="#推荐组件" class="headerlink" title="推荐组件"></a>推荐组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Widget ImageCached(</span><br><span class="line">  String url, &#123;</span><br><span class="line">  double width = 48,</span><br><span class="line">  double height = 48,</span><br><span class="line">  EdgeInsetsGeometry? margin,</span><br><span class="line">&#125;) &#123;</span><br><span class="line">  <span class="built_in">return</span> CachedNetworkImage( //CachedNetworkImage 是 Flutter用于异步加载和缓存网络图片。</span><br><span class="line">    imageUrl: <span class="string">&quot;https://cdn.pixabay.com/photo/2023/07/20/19/42/flower-8140215_1280.jpg&quot;</span>,</span><br><span class="line">    //地址</span><br><span class="line">    //用于构造一个完成的图片显示</span><br><span class="line">    imageBuilder: (context, imageProvider) =&gt; Container(//imageBuilder一个用于构建自定义图像的类 ImageProvider来提供要显示的图像，</span><br><span class="line">      height: duSetHeight(height),</span><br><span class="line">      width: duSetWidth(width),</span><br><span class="line">      margin: margin,</span><br><span class="line">      decoration: BoxDecoration(//容器修饰</span><br><span class="line">          borderRadius: Radii.k6pxRadivs,//圆角</span><br><span class="line">          image: DecorationImage(image: imageProvider, fit: BoxFit.cover)),//然后使用DecorationImage来指定如何渲染这个图像。</span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    //图片还没回来的 占位</span><br><span class="line">    placeholder: (context, url) &#123;</span><br><span class="line">      <span class="built_in">return</span> Container(</span><br><span class="line">        alignment: Alignment.center,//居中对齐</span><br><span class="line">        child: CircularProgressIndicator(), //旋转加载提示</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //如果图片加载失败</span><br><span class="line">    errorWidget: (context, url, error) =&gt; Image.network(</span><br><span class="line">        <span class="string">&quot;https://cdn.pixabay.com/photo/2023/07/20/19/42/flower-8140215_1280.jpg&quot;</span>),</span><br><span class="line">  );</span><br><span class="line">  //封装图片组件到新闻首页展示</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Widget recommendWidget(NewsItem item) &#123;</span><br><span class="line">  <span class="built_in">return</span> Container(</span><br><span class="line">    margin: EdgeInsets.all(duSetWidth(20)),//外边距</span><br><span class="line">    child: Column(</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">      children: &lt;Widget&gt;[</span><br><span class="line">        //顶部海报图片</span><br><span class="line">        ImageCached(</span><br><span class="line">          item.thumbnail!,</span><br><span class="line">            width: duSetWidth(335), height: duSetHeight(290)),</span><br><span class="line"></span><br><span class="line">        //作者</span><br><span class="line">        Container(</span><br><span class="line">          margin: EdgeInsets.only(top: duSetHeight(14)),</span><br><span class="line">          child: Text(</span><br><span class="line">            item.author!,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">                fontFamily: <span class="string">&quot;Avenir&quot;</span>,</span><br><span class="line">                fontWeight: FontWeight.normal,</span><br><span class="line">                color: AppColors.primartyText2,</span><br><span class="line">                fontSize: duSetFontSize(14)),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        //文章标题</span><br><span class="line">        Container(</span><br><span class="line">          margin: EdgeInsets.only(top: duSetHeight(10)),</span><br><span class="line">          child: Text(</span><br><span class="line">            item.title!,</span><br><span class="line">            style: TextStyle(</span><br><span class="line">                fontFamily: <span class="string">&quot;Montserrat&quot;</span>,</span><br><span class="line">                fontWeight: FontWeight.w600,</span><br><span class="line">                color: AppColors.primartyText2,</span><br><span class="line">                fontSize: duSetFontSize(24),</span><br><span class="line">                height: 1),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line"></span><br><span class="line">        //文章相关操作</span><br><span class="line">        Container(</span><br><span class="line">          margin: EdgeInsets.only(top: duSetWidth(10)),</span><br><span class="line">          child: Row(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">            children: &lt;Widget&gt;[</span><br><span class="line">              //约束盒子 ConstrainedBox是Flutter中的一个Box widget，用于限制子Widget在特定方向上的大小。它能够约束子Widget在某个方向上的大小，使其不超过指定的最大或最小值。</span><br><span class="line">              ConstrainedBox(</span><br><span class="line">                constraints: BoxConstraints(maxWidth: 120),//约束盒子的最大宽度</span><br><span class="line">                child: Text(</span><br><span class="line">                  item.category!, //分类</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                      fontFamily: <span class="string">&quot;Avenir&quot;</span>,</span><br><span class="line">                      fontWeight: FontWeight.w400,</span><br><span class="line">                      fontSize: duSetFontSize(14),</span><br><span class="line">                      color: AppColors.secondaryElementText),</span><br><span class="line">                  overflow: TextOverflow.clip, //将溢出的文字裁剪</span><br><span class="line">                  maxLines: 1,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              //间距 - 增加分割和事件的宽度</span><br><span class="line">              Container(</span><br><span class="line">                width: duSetWidth(15),</span><br><span class="line">              ),</span><br><span class="line">              //时间</span><br><span class="line">              ConstrainedBox(</span><br><span class="line">                constraints: BoxConstraints(maxWidth: 120),</span><br><span class="line">                child: Text(</span><br><span class="line">                  item.addtime.toString(), //分类</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                      fontFamily: <span class="string">&quot;Avenir&quot;</span>,</span><br><span class="line">                      fontWeight: FontWeight.w400,</span><br><span class="line">                      fontSize: duSetFontSize(12),</span><br><span class="line">                      color: AppColors.thirdElementText),</span><br><span class="line">                  overflow: TextOverflow.clip,</span><br><span class="line">                  maxLines: 1,</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              const Spacer(),</span><br><span class="line">              const Icon(</span><br><span class="line">                Icons.more_horiz,</span><br><span class="line">                color: AppColors.primartyText2,</span><br><span class="line">                size: 24,</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新闻列表组件"><a href="#新闻列表组件" class="headerlink" title="新闻列表组件"></a>新闻列表组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/新闻列表组件的编写</span><br><span class="line">Widget newsItem(NewsItem item, BuildContext context) &#123;</span><br><span class="line">  <span class="built_in">return</span> Container(//返回一个容器</span><br><span class="line">    height: duSetHeight(161),</span><br><span class="line">    padding: EdgeInsets.all(duSetWidth(20)),//内边距</span><br><span class="line">    child: Row(</span><br><span class="line">      mainAxisAlignment: MainAxisAlignment.spaceBetween,</span><br><span class="line">      crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">      children: [</span><br><span class="line">        ImageCached(item.thumbnail!,</span><br><span class="line">            width: duSetWidth(121), height: duSetHeight(121)),</span><br><span class="line">        SizedBox(</span><br><span class="line">          width: duSetWidth(194),</span><br><span class="line">          child: Column(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">            children: [</span><br><span class="line">              Text(</span><br><span class="line">                item.author!,</span><br><span class="line">                style: TextStyle(</span><br><span class="line">                    fontFamily: <span class="string">&quot;Avenir&quot;</span>,</span><br><span class="line">                    fontWeight: FontWeight.normal,</span><br><span class="line">                    color: AppColors.thirdElementText,</span><br><span class="line">                    fontSize: duSetFontSize(14),</span><br><span class="line">                    height: 1),</span><br><span class="line">              ),</span><br><span class="line">              Container(</span><br><span class="line">                margin: EdgeInsets.only(top: duSetHeight(10)),</span><br><span class="line">                child: Text(</span><br><span class="line">                  item.title!,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                    fontFamily: <span class="string">&quot;Nontserrat&quot;</span>,</span><br><span class="line">                    fontWeight: FontWeight.w500,</span><br><span class="line">                    color: AppColors.primartyText2,</span><br><span class="line">                    fontSize: duSetFontSize(16),</span><br><span class="line">                    height: 1,</span><br><span class="line">                  ),</span><br><span class="line">                  overflow: TextOverflow.ellipsis,//文本超出的处理方式 TextOverflow.ellipsis 会将超出容器的文本截断，并在末尾显示省略号 <span class="string">&quot;...&quot;</span> 以表示被截断的文本。</span><br><span class="line">                  maxLines: 3,//最大行数</span><br><span class="line">                ),</span><br><span class="line">              ),</span><br><span class="line">              const Spacer(),</span><br><span class="line">              Row(</span><br><span class="line">                crossAxisAlignment: CrossAxisAlignment.center,</span><br><span class="line">                children: [</span><br><span class="line">                  ConstrainedBox(</span><br><span class="line">                    constraints: BoxConstraints(maxWidth: duSetWidth(60)),</span><br><span class="line">                    child: Text(</span><br><span class="line">                      item.category!,</span><br><span class="line">                      style: TextStyle(</span><br><span class="line">                          fontFamily: <span class="string">&quot;Avenir&quot;</span>,</span><br><span class="line">                          fontWeight: FontWeight.normal,</span><br><span class="line">                          color: AppColors.secondaryElementText,</span><br><span class="line">                          fontSize: duSetFontSize(14),</span><br><span class="line">                          height: 1),</span><br><span class="line">                      overflow: TextOverflow.clip,</span><br><span class="line">                      maxLines: 1,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  SizedBox(</span><br><span class="line">                    width: duSetWidth(15),</span><br><span class="line">                  ),</span><br><span class="line">                  ConstrainedBox(</span><br><span class="line">                    constraints: BoxConstraints(maxWidth: duSetWidth(100)),</span><br><span class="line">                    child: Text(</span><br><span class="line">                      duTimeLineFormat(item.addtime!),//duTimeLineFormat 是处理时间轴格式的组件，该组件封装在valuse中</span><br><span class="line">                      style: TextStyle(</span><br><span class="line">                          fontFamily: <span class="string">&quot;Avenir&quot;</span>,</span><br><span class="line">                          fontWeight: FontWeight.normal,</span><br><span class="line">                          color: AppColors.secondaryElementText,</span><br><span class="line">                          fontSize: duSetFontSize(14),</span><br><span class="line">                          height: 1),</span><br><span class="line">                      overflow: TextOverflow.clip,//超出的处理方式为裁剪</span><br><span class="line">                      maxLines: 1,</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                  const Spacer(),</span><br><span class="line">                  InkWell(//用于实现水波纹点击效果。</span><br><span class="line">                    child: Icon(</span><br><span class="line">                      Icons.more_horiz,</span><br><span class="line">                      color: AppColors.primartyText2,</span><br><span class="line">                      size: duSetFontSize(24),</span><br><span class="line">                    ),</span><br><span class="line">                    onTap: () &#123;</span><br><span class="line">                      Navigator.pushNamed(context, <span class="string">&quot;./detail&quot;</span>,</span><br><span class="line">                          arguments: ScreenArguments(</span><br><span class="line">                            item.author!,</span><br><span class="line">                            item.addtime!,</span><br><span class="line">                            item.thumbnail!,</span><br><span class="line">                            item.title!,</span><br><span class="line">                            <span class="string">&quot;暂无内容&quot;</span></span><br><span class="line">                          ));</span><br><span class="line">                    &#125;,</span><br><span class="line">                  )</span><br><span class="line">                ],</span><br><span class="line">              )</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>funk</title>
      <link href="/2023/10/14/funk-1/"/>
      <url>/2023/10/14/funk-1/</url>
      
        <content type="html"><![CDATA[<h2 id="【吉他干货】想搞懂Funk？你必须看这篇文章！"><a href="#【吉他干货】想搞懂Funk？你必须看这篇文章！" class="headerlink" title="【吉他干货】想搞懂Funk？你必须看这篇文章！"></a>【吉他干货】想搞懂Funk？你必须看这篇文章！</h2><p><img src="/2023/10/14/funk-1/1.png"><br><img src="/2023/10/14/funk-1/2.png"><br><img src="/2023/10/14/funk-1/3.png"><br><img src="/2023/10/14/funk-1/4.png"><br><img src="/2023/10/14/funk-1/5.png"><br><img src="/2023/10/14/funk-1/6.png"><br><img src="/2023/10/14/funk-1/7.png"><br><img src="/2023/10/14/funk-1/8.png"><br><img src="/2023/10/14/funk-1/9.png"><br><img src="/2023/10/14/funk-1/10.png"><br><img src="/2023/10/14/funk-1/11.png"><br><img src="/2023/10/14/funk-1/12.png"><br><img src="/2023/10/14/funk-1/13.png"><br><img src="/2023/10/14/funk-1/14.png"><br><img src="/2023/10/14/funk-1/15.png"><br><img src="/2023/10/14/funk-1/16.png"><br><img src="/2023/10/14/funk-1/17.png"><br><img src="/2023/10/14/funk-1/18.png"><br><img src="/2023/10/14/funk-1/19.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/06/17/hello-world/"/>
      <url>/2023/06/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情鏈接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
